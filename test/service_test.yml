$schema: "http://support.riverbed.com/apis/service_def/2.2"
id: "http://support.riverbed.com/apis/test/1.0"
provider: "riverbed"
name: "test"
version: "1.0"
title: "Test REST API"
defaultAuthorization: "required"

types:
   type_boolean:
      type: boolean
      description: "Type boolean"
      default: True
      enum: [ True ]

   type_number:
      type: number
      description: "Type number"

   type_number_limits:
      type: number
      description: "Type number with limits"
      minimum: 10
      maximum: 20

   type_integer:
      type: integer
      description: "Type integer"

   type_string:
      type: string
      description: "Type string"

   type_object:
      type: object
      description: "Type object"
      additionalProperties: False
      properties:
         p1: { type: number }
         p2: { type: string }

   type_object_with_refs:
      type: object
      description: "Type object with references to other types"
      additionalProperties: False
      properties:
         p1: { $ref: "#/types/type_boolean" }
         p2: { $ref: "#/types/type_number" }

   type_ref_integer:
      $ref: "#/types/type_integer"

resources:
   test_boolean:
      type: boolean
      links: { self: { path: "$/test_boolean" }  }

   test_number:
      type: number
      links: { self: { path: "$/test_number" }  }

   test_integer:
      type: integer
      links: { self: { path: "$/test_integer" }  }

   test_string:
      type: string
      links: { self: { path: "$/test_string" }  }

   test_array:
      type: array
      items: { type: number }
      links: { self: { path: "$/test_array" }  }

   test_array_ref:
      type: array
      items: { $ref: '#/types/type_number' }
      links: { self: { path: "$/test_array_ref" }  }

   test_object:
      type: object
      properties:
         prop_number: { type: number }
         prop_string: { type: string }
         prop_array:
            type: array
            items: { type: number }
         prop_object:
            type: object
            properties:
               prop: { type: number }

      links: { self: { path: "$/test_object" } }

   test_object_required:
      type: object
      properties:
         prop_number: { type: number }
         prop_string: { type: string }
         prop_array:
            type: array
            items: { type: number }
         prop_object:
            type: object
            properties:
               prop: { type: number }
      required: [ prop_number, prop_array ]
      links: { self: { path: "$/test_object_required" } }

   test_object_ref:
      type: object
      properties:
         prop_number_ref: { $ref: '#/types/type_number' }
         prop_string_ref: { $ref: '#/types/type_string' }
         prop_object_ref: { $ref: '#/types/type_object' }
      links: { self: { path: "$/test_object_ref" } }

   test_descr:
      type: object
      description: "Test 1 with descriptions"
      properties:
         prop_number: { type: number, description: "prop_number" }
         prop_string: { type: string, description: "prop_string" }
         prop_array:
            description: "prop_array"
            type: array
            items: { type: number }
         prop_object:
            description: "prop_object"
            type: object
            properties:
               prop: { type: number }

      links:
         self:
            path: "$/test_descr"
            description: "self link"

   test_example:
      type: object
      example:
         prop_number: 1
         prop_string: "string"
         prop_array: [ 2, 3 ]
         prop_object: { prop: 4 }

      description: "Test 1 with descriptions"
      properties:
         prop_number: { type: number, description: "prop_number" }
         prop_string: { type: string, description: "prop_string" }
         prop_array:
            description: "prop_array"
            type: array
            items: { type: number }
         prop_object:
            description: "prop_object"
            type: object
            properties:
               prop: { type: number }

      links:
         self:
            path: "$/test_descr"
            description: "self link"

   test_methods:
      type: object
      properties:
         id: { type: number }

      links:
         self: { path: "$/test_methods" }
         get:
            method: GET
            response: { $ref: '#/resources/test_methods' }

         get_req:
            method: GET
            request:
               type: object
               properties:
                  p1: { type: number }
                  p2: { type: string }
            response: { $ref: '#/resources/test_methods' }

         get_auth_req:
            method: GET
            authorization: required
            response: { $ref: '#/resources/test_methods' }

         get_auth_opt:
            method: GET
            authorization: optional
            response: { $ref: '#/resources/test_methods' }

         set:
            method: PUT
            request: { $ref: '#/resources/test_methods' }
            response: { $ref: '#/resources/test_methods' }

         delete:
            method: DELETE

   test_object_addprops_true:
      type: object
      additionalProperties: True
      properties:
         p1: { type: number }
         p2: { type: string }

      links:
         self: { path: "$/test_methods" }

   test_object_addprops_number:
      type: object
      additionalProperties: { type: number }
      properties:
         p1: { type: number }
         p2: { type: string }

      links:
         self: { path: "$/test_methods" }

   test_object_addprops_string:
      type: object
      additionalProperties: { type: string }
      properties:
         p1: { type: number }
         p2: { type: string }

      links:
         self: { path: "$/test_methods" }

   test_long_table_line:
      type: object
      additionalProperties: False
      properties:
         level1:
            type: object
            additionalProperties: False
            properties:
               level2:
                  type: object
                  additionalProperties: False
                  properties:
                     level3:
                        type: object
                        additionalProperties: False
                        properties:
                           level4:
                              type: number

      links: { self: { path: "$/test_long_table_lines" } }


   test_number_readonly:
      type: number
      readOnly: True

      links: { self: { path: "$/test_number_readonly" } }

   test_object_full_readonly:
      type: object
      readOnly: True
      additionalProperties: False
      properties:
         p1: { type: number }
         p2: { type: string }
         p3:
            type: array
            items:
               { $ref: '#/types/type_number' }

      links: { self: { path: "$/test_object_full_readonly" } }

   test_object_partial_readonly:
      type: object
      properties:
         p1: { type: number }
         p2: { type: string, readOnly: True }
         p3:
            type: array
            items:
               { $ref: '#/types/type_number' }

      links: { self: { path: "$/test_object_full_readonly" } }

   test_number_min:
      type: number
      minimum: 10
      links: { self: { path: "$/test_number_min" } }

   test_number_max:
      type: number
      maximum: 10
      links: { self: { path: "$/test_number_max" } }

   test_number_excl_min:
      type: number
      minimum: 10
      exclusiveMinimum: true
      links: { self: { path: "$/test_number_excl_min" } }

   test_number_excl_max:
      type: number
      maximum: 10
      exclusiveMaximum: true
      links: { self: { path: "$/test_number_excl_max" } }

   test_number_range:
      type: number
      minimum: 10
      maximum: 15
      links: { self: { path: "$/test_number_range" } }

   test_number_default:
      type: number
      default: 10
      links: { self: { path: "$/test_number_default" } }

   test_string_enum:
      type: string
      enum: [ 'ENUM1', 'ENUM2' ]
      default: ENUM1
      links: { self: { path: "$/test_string_enum" } }

   test_string_pattern:
      type: string
      pattern: "[A-Za-z0-9]foobar"
      links: { self: { path: "$/test_string_pattern" } }

   test_string_notes:
      type: string
      notes: "This has notes"
      links: { self: { path: "$/test_string_pattern" } }

   test_array_min:
      type: array
      minItems: 10
      items: { type: number }
      links: { self: { path: "$/test_array_min" } }

   test_array_max:
      type: array
      maxItems: 10
      items: { type: number }
      links: { self: { path: "$/test_array_max" } }

   test_array_min_max:
      type: array
      minItems: 10
      maxItems: 20
      items: { type: number }
      links: { self: { path: "$/test_array_min_max" } }

   test_anyof1:
      anyOf:
         -  type: object
            additionalProperties: False
            properties:
               a1: { type: number }
               a2: { type: number }
         -  type: object
            additionalProperties: False
            properties:
               a3: { type: number }
               a4: { type: number }
      links: { self: { path: "$/test_anyof1" } }

   test_anyof2:
      anyOf:
         -  type: object
            additionalProperties: False
            properties:
               a1: { type: number, minimum: 1, maximum: 1 }
               a2: { type: number, minimum: 5, maximum: 9 }
         -  type: object
            additionalProperties: False
            properties:
               a1: { type: number, minimum: 2, maximum: 2 }
               a2: { type: number, minimum: 10, maximum: 20 }
      links: { self: { path: "$/test_anyof2" } }

   test_anyof3:
      type: object
      additionalProperties: False
      properties:
         a1: { type: number, minimum: 1, maximum: 2 }
         a2: { type: number }
      anyOf:
         -  type: object
            additionalProperties: False
            properties:
               a1: { type: number, minimum: 1, maximum: 1 }
               a2: { type: number, minimum: 5, maximum: 9 }
         -  type: object
            additionalProperties: False
            properties:
               a1: { type: number, minimum: 2, maximum: 2 }
               a2: { type: number, minimum: 10, maximum: 20 }
      links: { self: { path: "$/test_anyof2" } }

   test_allof:
      allOf:
         -  type: object
            additionalProperties: False
            properties:
               a1: { type: number, enum: [1, 2] }
               a2: { type: object, additionalProperties: True }
               a3: { type: string }
            required: [ a1, a2 ]
         -  type: object
            additionalProperties: True
            properties:
               a3: { type: string, pattern: "[a-z][1-3]" }

      anyOf:
         -  type: object
            additionalProperties: False
            properties:
               a1: { type: number, enum: [1] }
               a2:
                  type: object
                  additionalProperties: False
                  properties:
                     a21_number: { type: number }
                     a21_string: { type: string }
               a3: { type: string }
         -  type: object
            additionalProperties: False
            properties:
               a1: { type: number, enum: [2] }
               a2:
                  type: object
                  additionalProperties: False
                  properties:
                     a22_number: { type: number }
                     a22_string: { type: string }
                     a22_array: { type: array, items: { type: number } }
               a3: { type: string }
      links: { self: { path: "$/test_allof" } }

   test_oneof:
      oneOf:
         -  type: object
            properties:
               a1: { type: number, minimum: 1, maximum: 10 }
               a2: { type: number, minimum: 20 }
            additionalProperties: False
         -  type: object
            properties:
               a1: { type: number, minimum: 5, maximum: 20 }
               a2: { type: number }
            additionalProperties: False
      links: { self: { path: "$/test_oneof" } }

   test_not:
      type: number
      minimum: 1
      maximum: 10
      not:
         anyOf:
            -  { type: number, minimum: 5, maximum: 5 }
            -  { type: number, minimum: 7, maximum: 8 }
      links: { self: { path: "$/test_not" } }

   test_self_params:
      type: number
      links:
         self:
            path: "$/test_not"
            params:
               x: { type: number }
               y: { type: number }
               z: { type: string }

   test_item:
      type: object
      properties:
         num: { type: number }
         name: { type: string }

      links:
         self: { path: "$/test_items/{num}" }
         get:
            method: GET
            response: { $ref: '#/resources/test_item' }

   test_items:
      type: array
      items:
         type: number
         relations:
            full:
               resource: "#/resources/test_item"
               vars: { num: "0" }

      links: { self: { path: "$/test_items}" } }

   test_merge:
      $merge:
         source:
            type: object
            properties:
               val: { type: integer }
         with:
            links: { self: { path: "$/test_merge" } }
            properties:
               val:
                  minimum: 10
                  maximum: 20

   test_merge_source_ref:
      $merge:
         source: { $ref: "#/types/type_object" }
         with:
            links: { self: { path: "$/test_merge_source_ref" } }
            properties:
               p1:
                  minimum: 10
                  maximum: 20

   test_merge_with_ref:
      $merge:
         source:
            links: { self: { path: "$/test_merge_with_ref" } }
            properties:
               p1:
                  minimum: 10
                  maximum: 20
         with:
            $ref: "#/types/type_object"

   test_merge_double_ref:
      $merge:
         source: { $ref: "#/types/type_ref_integer" }
         with:
            links: { self: { path: "$/test_merge_double_ref" } }
            minimum: 10
            maximum: 20

   test_merge_merge:
      $merge:
         source: { $ref: "#/resources/test_merge" }
         with:
            links: { self: { path: "$/test_merge_merge" } }
            properties:
               val:
                  minimum: 15
                  maximum: 20


   test_self_after_get:
      type: boolean
      links:
         # Verify that the get method path resolution works
         # when self is defined after get
         get: { method: GET }
         self: { path: "$/test_self_after_get" }
